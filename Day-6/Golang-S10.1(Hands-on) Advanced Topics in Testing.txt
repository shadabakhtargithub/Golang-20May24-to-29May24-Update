*************************************************************************************************************************************************
						***** Golang-S10.1(Hands-on) Advanced Topics in Testing ***** 
*************************************************************************************************************************************************
// Writing Table-Driven Tests
package main

import (
	"fmt"
	"testing"
)

func Sum(a, b int) int {
	return a + b
}

func TestSum(t *testing.T) {
	tests := []struct {
		a, b, expected int
	}{
		{1, 2, 3},
		{0, 0, 0},
		{-1, 1, 0},
	}

	for _, tt := range tests {
		name := fmt.Sprintf("Sum(%d, %d)", tt.a, tt.b)
		t.Run(name, func(t *testing.T) {
			result := Sum(tt.a, tt.b)
			if result != tt.expected {
				t.Errorf("got %d, want %d", result, tt.expected)
			}
		})
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Subtests and Test Grouping
package main

import (
	"testing"
)

func Sum(a, b int) int {
	return a + b
}

func TestSum(t *testing.T) {
	t.Run("Positive numbers", func(t *testing.T) {
		result := Sum(1, 2)
		expected := 3
		if result != expected {
			t.Errorf("got %d, want %d", result, expected)
		}
	})

	t.Run("Zero values", func(t *testing.T) {
		result := Sum(0, 0)
		expected := 0
		if result != expected {
			t.Errorf("got %d, want %d", result, expected)
		}
	})

	t.Run("Negative numbers", func(t *testing.T) {
		result := Sum(-1, 1)
		expected := 0
		if result != expected {
			t.Errorf("got %d, want %d", result, expected)
		}
	})
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Mocking and Dependency Injection

package main

import (
	"fmt"
)

type Database interface {
	GetData() string
}

type RealDatabase struct{}

func (r RealDatabase) GetData() string {
	return "Real data from database"
}

type MockDatabase struct{}

func (m MockDatabase) GetData() string {
	return "Mock data from database"
}

func GetDataFromDB(db Database) string {
	return db.GetData()
}

func main() {
	realDB := RealDatabase{}
	mockDB := MockDatabase{}

	realData := GetDataFromDB(realDB)
	mockData := GetDataFromDB(mockDB)

	fmt.Println("Real data:", realData)
	fmt.Println("Mock data:", mockData)
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Benchmarking and Profiling Tests
package main

import (
	"testing"
)

func Fib(n int) int {
	if n <= 1 {
		return n
	}
	return Fib(n-1) + Fib(n-2)
}

func BenchmarkFib10(b *testing.B) {
	for i := 0; i < b.N; i++ {
		Fib(10)
	}
}

func BenchmarkFib20(b *testing.B) {
	for i := 0; i < b.N; i++ {
		Fib(20)
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Performance Optimization
package main

import (
	"fmt"
	"math"
)

// Naive implementation
func IsPrimeNaive(n int) bool {
	if n <= 1 {
		return false
	}
	for i := 2; i <= int(math.Sqrt(float64(n))); i++ {
		if n%i == 0 {
			return false
		}
	}
	return true
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Optimized implementation
func IsPrimeOptimized(n int) bool {
	if n <= 1 {
		return false
	}
	if n <= 3 {
		return true
	}
	if n%2 == 0 || n%3 == 0 {
		return false
	}
	i := 5
	for i*i <= n {
		if n%i == 0 || n%(i+2) == 0 {
			return false
		}
		i += 6
	}
	return true
}

func main() {
	fmt.Println("Is 17 prime (naive)?", IsPrimeNaive(17))
	fmt.Println("Is 17 prime (optimized)?", IsPrimeOptimized(17))
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
								----- END ----- 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------